# Description: Activity name for the Android activity you want to launch from your package. 
# This often needs to be preceded by a . (e.g., .MainActivity instead of MainActivity)
# value: MainActivity, .Settings
#appActivity: .activity.MainPageActivity
appActivity: .Launcher

# Description: Java package of the Android app you want to run
# value: com.example.android.myApp
#appPackage: com.netease.qa.emmagee
appPackage: me.ele

# Description: Activity name for the Android activity you want to wait for
# value: SplashActivity
appWaitActivity: 

# Description: Java package of the Android app you want to wait for
# value: com.example.android.myApp, com.android.settings
appWaitPackage: 

# Description: Timeout in seconds while waiting for device to become ready
# value: 5
deviceReadyTimeout: 

# Description: Fully qualified instrumentation class. Passed to -w in adb shell am 
# instrument -e coverage true -w
# value: com.my.Pkg/com.my.Pkg.instrumentation.MyInstrumentation
androidCoverage: 

# Description: (Chrome and webview only) Enable Chromedriver’s performance logging (default false)
# value: true, false
enablePerformanceLogging: 

# Description: Timeout in seconds used to wait for a device to become ready after booting
# value: e.g., 30
androidDeviceReadyTimeout: 

# Description: Devtools socket name. Needed only when tested app is a Chromium embedding browser. 
# The socket is open by the browser and Chromedriver connects to it as a devtools client.
# value: e.g., chrome_devtools_remote
androidDeviceSocket: 

# Description: Use a custom keystore to sign apks, default false
# value: true or false
useKeystore: 

# Description: Path to custom keystore, default ~/.android/debug.keystore
# value: e.g., /path/to.keystore
keystorePath: 

# Description: Password for custom keystore
# value: e.g., foo
keystorePassword: 

# Description: Alias for key
# value: e.g., androiddebugkey
keyAlias: 

# Description: Password for key
# value: e.g., foo
keyPassword: 

# Description: The absolute local path to webdriver executable (if Chromium embedder provides 
# its own webdriver, it should be used instead of original chromedriver bundled with Appium)
# value: /abs/path/to/webdriver
chromedriverExecutable: 

# Description: Amount of time to wait for Webview context to become active, in ms. Defaults to 2000
# value: e.g., 4
autoWebviewTimeout: 

# Description: Password for key
# value: e.g., foo
keyPassword:

# Description: Intent action which will be used to start activity (default android.intent.action.MAIN)
# value: e.g.android.intent.action.MAIN, android.intent.action.VIEW
intentAction:

# Description: Intent category which will be used to start activity (default android.intent.category.LAUNCHER)
# value: e.g. android.intent.category.LAUNCHER, android.intent.category.APP_CONTACTS
intentCategory:

# Description: Flags that will be used to start activity (default 0x10200000)
# value: e.g. 0x10200000
intentFlags:

# Description: Additional intent arguments that will be used to start activity. See 
# http://developer.android.com/tools/help/adb.html#IntentSpec
# value: e.g. --esn <EXTRA_KEY>, --ez <EXTRA_KEY> <EXTRA_BOOLEAN_VALUE>, etc.
optionalIntentArguments:

# Description: Doesn’t stop the process of the app under test, before starting the app using adb. 
# If the app under test is created by another anchor app, setting this false, allows the process 
# of the anchor app to be still alive, during the start of the test app using adb. In other words, 
# with dontStopAppOnReset set to true, we will not include the -S flag in the adb shell am start 
# call. With this capability omitted or set to false, we include the -S flag. Default false
# value: true or false
dontStopAppOnReset:

# Description: Enable Unicode input, default false
# value: true or false
unicodeKeyboard: true

# Description: Reset keyboard to its original state, after running Unicode tests with 
# unicodeKeyboard capability. Ignored if used alone. Default false
# value: true or false
resetKeyboard: true

# Description: Skip checking and signing of app with debug keys, will work only with UiAutomator 
# and not with selendroid, default false
# value: true or false
noSign:

# Description: Calls the setCompressedLayoutHierarchy() uiautomator function. This capability can 
# speed up test execution, since Accessibility commands will run faster ignoring some elements. 
# The ignored elements will not be findable, which is why this capability has also been implemented 
# s a toggle-able setting as well as a capability. Defaults to false
# value: true or false
ignoreUnimportantViews: 

# Description: Disables android watchers that watch for application not responding and application 
# crash, this will reduce cpu usage on android device/emulator. This capability will work only with 
# UiAutomator and not with selendroid, default false
# value: true or false
disableAndroidWatchers:

# Description: Allows passing chromeOptions capability for chrome driver. For more information see 
# https://sites.google.com/a/chromium.org/chromedriver/capabilities
# value: true or false
chromeOptions:



